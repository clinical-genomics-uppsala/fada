__author__ = "Pádraic Corcoran"
__copyright__ = "Copyright 2024, Pádraic Corcoran"
__email__ = "padraic.corcoran@sciliflab.uu.se"
__license__ = "GPL-3"


include: "rules/common.smk"


rule all:
    input:
        compile_output_file_list,


ruleorder: _copy_samtools_crai > compression_samtools_index
ruleorder: _copy_stranger_trgt_tbi > annotation_tabix_vcf
ruleorder: snv_indels_bgzip > annotation_bgzip_vcf
ruleorder: snv_indels_tabix > annotation_tabix_vcf


module annotation:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/annotation", path="workflow/Snakefile", tag=config["modules"]["annotation"])
    config:
        config


use rule * from annotation as annotation_*


use rule stranger from annotation as annotation_stranger with:
    input:
        vcf="cnv_sv/trgt_genotype/{sample}_{type}.vcf.gz",
        cat=config.get("stranger", {}).get("catalog", ""),
    output:
        vcf=temp("annotation/stranger/{sample}_{type}.trgt.vcf"),


module alignment:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/alignment", path="workflow/Snakefile", tag=config["modules"]["alignment"])
    config:
        config


use rule * from alignment as alignment_*


module compression:
    snakefile:
        get_module_snakefile(
            config, "hydra-genetics/compression", path="workflow/Snakefile", tag=config["modules"]["compression"]
        )
    config:
        config


use rule * from compression as compression_*


use rule samtools_view from compression as compression_samtools_view with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        ref=config.get("reference", {}).get("fasta", ""),
    output:
        cram=temp("compression/samtools_view/{sample}_{type}.cram"),
    log:
        "compression/samtools_view/{sample}_{type}.cram.log",
    benchmark:
        repeat(
            "compression/samtools_view/{sample}_{type}.cram.benchmark.tsv",
            config.get("compression_samtools_view", {}).get("benchmark_repeats", 1),
        )


module cnv_sv:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/cnv_sv", path="workflow/Snakefile", tag=config["modules"]["cnv_sv"])
    config:
        config


use rule * from cnv_sv as cnv_sv_*

use rule sniffles2_call from cnv_sv as cnv_sv_sniffles2_call with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        ref=config.get("reference", {}).get("fasta", ""),


use rule trgt_genotype from cnv_sv as cnv_sv_trgt_genotype with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        bed=config.get("reference", {}).get("pathogenic_repeats_bed", ""),
        ref=config.get("reference", {}).get("fasta", ""),
    output:
        vcf="cnv_sv/trgt_genotype/{sample}_{type}.vcf.gz",
        bam="cnv_sv/trgt_genotype/{sample}_{type}.spanning.bam",


use rule trgt_plot from cnv_sv as cnv_sv_trgt_plot with:
    output:
        image=expand("cnv_sv/trgt_plot/motif/{{sample}}_{{type}}_{{locus}}.{ext}", ext=config.get("trgt_plot_motif", {}).get("image", "svg")),

use rule trgt_plot from cnv_sv as cnv_sv_trgt_plot_meth with:
    output:
        image=expand("cnv_sv/trgt_plot/meth/{{sample}}_{{type}}_{{locus}}.{ext}", ext=config.get("trgt_plot_meth", {}).get("image", "svg")),

module snv_indels:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/snv_indels", path="workflow/Snakefile", tag=config["modules"]["snv_indels"])
    config:
        config


use rule * from snv_indels as snv_indels_*


use rule deepvariant from snv_indels as snv_indels_deepvariant with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
        ref=config.get("reference", {}).get("fasta", ""),


use rule bcftools_concat from snv_indels as snv_indels_bcftools_concat with:
    input:
        calls=expand("{{file}}_{chr}.{{vcf}}.gz", chr=[f"chr{i}" for i in list(range(1, 23)) + ["X", "Y"]]),
        index=expand("{{file}}_{chr}.{{vcf}}.gz", chr=[f"chr{i}" for i in list(range(1, 23)) + ["X", "Y"]]),


module qc:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/qc", path="workflow/Snakefile", tag=config["modules"]["qc"])
    config:
        config

use rule multiqc from qc as qc_multiqc with:
    input:
        files=lambda wildcards: set(
            [
                file.format(sample=sample, type=u.type)
                for file in config["multiqc"]["reports"][wildcards.report]["qc_files"]
                for sample in get_samples(samples)
                for u in units.loc[sample].dropna().itertuples()
                if u.type in config["multiqc"]["reports"][wildcards.report]["included_unit_types"]
            ]
        ),
        config=lambda wildcards: config["multiqc"]["reports"][wildcards.report]["config"],


use rule mosdepth from qc as qc_mosdepth with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],

use rule samtools_stats from qc as qc_samtools_stats with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],

use rule samtools_idxstats from qc as qc_samtools_idxstats with:
    input:
        bam=lambda wildcards: get_bam_input(wildcards)[0],
        bai=lambda wildcards: get_bam_input(wildcards)[1],
    output:
        temp("qc/samtools_idxstats/{sample}_{type}.samtools-idxstats.txt"),